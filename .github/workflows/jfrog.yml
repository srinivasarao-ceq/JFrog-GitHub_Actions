name: Jfrog integrate with GitHub actions
on:
  workflow_dispatch

env:
  aws-region: ap-southeast-1

jobs:
  Jfrog-configuration:
    runs-on: ubuntu-latest
    steps:
      - name: configure Jfrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          # JFrog platform url (for example: https://acme.jfrog.io) 
          JF_URL: ${{ secrets.JF_URL }}
          
          # Basic authentication credentials
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
       
      - name: AWS CLI configuration
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws-region }}
      
      - name: checkout the code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init
      
      - name: Run JFrog Scan
        id: jfrog-scan
        run: |
          jf audit --watches "demo" --fail false
  
      
      # - name: Check JFrog Scan Results
      #   run: |
      #     if grep -qE "Found [1-9][0-9]* IaC vulnerabilities" <<< "${{ steps.jfrog-scan.outputs.stdout }}"; then
      #       echo "Found IaC vulnerabilities. Stopping Terraform plan."
      #       exit 1
      #     else
      #       echo "No non-zero IaC vulnerabilities found. Proceeding with Terraform plan."
      #     fi


      - name: Check for High Severity IaC Vulnerabilities
        id: check_iac_vulnerabilities
        run: |
          # Extract the relevant part of the output
          iac_output=$(echo "${{ steps.my_step.outputs.results }}" | grep -A 5 "Infrastructure as Code Vulnerabilities")
          
          # Check for High severity
          if echo "${iac_output}" | grep -q "High"; then
            echo "High severity IaC vulnerabilities found."
            echo "::set-output name=high_severity_iac::true"
          else
            echo "No High severity IaC vulnerabilities found."
            echo "::set-output name=high_severity_iac::false"
          fi

      - name: Plan Terraform
        if: steps.check_iac_vulnerabilities.outputs.skip_next_step != 'true'
        run: terraform plan 
      
      # - name: Apply Terraform
      #   if: steps.terraform-plan.outcome == 'success'  # Only run if Terraform plan is successful
      #   run: terraform apply -auto-approve
